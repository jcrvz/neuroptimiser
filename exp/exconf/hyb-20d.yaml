# [exp-1.yaml]
# Preliminary Experiment v4.0 - Aug 5, 2025.
# Coded by: Jorge M. Cruz-Duarte (jorge.cruz-duarte@inria.fr)

# Experiment metadata
metadata:
  name: Neuropt-Hyb100-2d             # Name of the experiment
  description: Experiment with high dim # Description of the experiment
  debug_mode: false                # Whether to run in debug mode
  suite_name: bbob                # bbob or bbob-largescale
  func_indices: ~                 # None means all problems in the suite
  num_dimensions: 2  # Number of dimensions to use, can be a list or a range (e.g., [2-10]) 20,40,80,160,320,640
  instances: 1-15
  budget_multiplier: 1           # Multiplier for the budget (* num_dimensions)

# Optimiser configuration
optimiser:
  num_steps: 1e7                  # (multiplier) Maximum number of steps to run
  num_agents: 100                  # Number of agents to use
  spiking_core: TwoDimSpikingCore # The only available core for the moment
  neighbourhood:
    neuron_topology: 2dr          # Available topologies: 1dr, 2dr, random, full
    unit_topology: random            # Available topologies: 1dr, 2dr, random, full
    num_neighbours: 10            # Number of neighbours per unit/neuron (only if using random neighbourhood)

# Core configuration(s)
core_parameters:
  default:                        # DEFAULT PARAMETERS
    alpha: 1.0                    # Scaling factor for neuron input
    dt: 0.01                      # Time step for numerical integration
    max_steps: ~                  # Maximum number of steps, null means equal to num_steps
    noise_std: [ 0.0, 0.3 ]       # Range of noise standard deviation per unit
    ref_mode: pg                  # Reference for bidirectional transformation.
    is_bounded: true              # Whether to clip state variables within bounds determined using the transformation
                                  # Available modes: null (the reference is zero), p (particular best), g (global best),
                                  #   pg (average of p and g), pgn (average of p, g, and neighbourhood)
    selector: ~                   # Selector parameters (nothing implemented yet)
    hd_operator:                  # DYNAMIC OPERATOR
      name: linear            # Neuron model name: linear or izhikevich
      approx: rk4                 # Integration method: rk4 or euler
      coeffs: random              # For linear: random, sink, source, attractor, repeller, saddle, centre
                                  #   or 'coeffs + _all' (e.g., sink_all) indicates all neurons has different coeffs
                                  #   or [np.array([0.1, 0.2]), np.array([0.3, 0.4])] for custom coeffs
                                  # For izhikevich: random, RS, IB, CH, FS, TC, TCn, RZ, LTS for fixed coeffs
                                  #   or 'coeffs + r' (e.g., RSr) indicates all neurons has same coeffs but slightly different from the original mode
                                  #   or 'coeffs + _all' (e.g., RS_all) indicates all neurons has different coeffs from the original mode
                                  #   or {"a": 0.02, "b": 0.2, "c": -65, "d": 8, "I": 0.1} (c and d are unused) for custom coeffs
    threshold:                    # THRESHOLDING PARAMETERS
      thr_mode: diff_pg           # Available modes: fixed (fixed threshold like in LIF or IZH),
                                  #   adaptive (adaptive based on the time constant k),
                                  #   adaptive_stag (adaptive based on the internal stagnation count),
                                  #   diff_pg (absolute error of between p and g),
                                  #   diff_pref (absolute error of between p and the reference),
                                  #   random (use a base threshold and add a random value)
      thr_alpha: 2.0              # Adaptation speed of the threshold, this is used for scaling the threshold
      thr_k: 0.05                 # Threshold update smoothing factor, this only work with thr_mode = adaptive_time, adaptive_stag, and random
      thr_min: 1e-12               # Minimum allowed threshold, this is used for limiting the threshold
      thr_max: 1.0                # Maximum allowed threshold, this is used for limiting the threshold
    spiking:                      # SPIKING parameters
      spk_alpha: 0.25             # Smoothing factor for spike detection
      spk_cond: l2                # Spiking condition, the available options are: fixed (fixed threshold like in LIF or IZH),
                                  #   l1 (SUM_i(abs(v_i)) > threshold), l2 ((SUM_i(v_i^2))^0.5  > threshold),
                                  #   l2_gen ((v1^2 + spk_alpha * v2^2) > threshold),
                                  #   random (probabilistic spiking with sigmoid probability curve)
                                  #   adaptive (adaptive shrinking based on the spk_alpha and the number of steps
                                  #   stable ((SUM_i(v_i^2))^0.5  < eps), this is used for stable systems reaching v_i = 0
    hs_operator:                  # SPIKING OPERATOR
      name: differential           # Spiking operator name: fixed (the best particular position with a slightly different value),
                                  #   directional (a defined position with a directional operator),
                                  #   differential (a position generated by the DE mutation operator),
                                  #   random (a random position)
      variant: current-to-rand    # Variants of the spiking operator. There are only variants for:
                                  # 1. directional operator: pbest (target the best particular position),
                                  #    gbest (target the global best position), center (target the center in neuromorphic space)
                                  # 2. differential operator:
                                  #   rand (from DE/rand/1), current-to-rand (from DE/current-to-rand),
                                  #   current-to-best (from DE/current-to-best), best-to-rand (from DE/best/1),
  core_1:                         # CORE CUSTOM PARAMETERS (only change the parameters you want to modify)
    weight: 0.5                   # Weight of the core, the sum of all cores must be equal 1.0 correspond to the population size
    hd_operator:
      name: linear
      coeffs: random
    spiking:
      spk_cond: l2
  core_2:
    weight: 0.5                   # Weight of the core, the sum of all cores must be equal 1.0 correspond to the population size
    hd_operator:
      name: izhikevich
      coeffs: random
    spiking:
      spk_cond: l2